"use strict";
/* istanbul ignore next */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* istanbul ignore next */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var fs = require("fs");
var bluebird = require("bluebird");
var path = require("path");
var os = require("os");
var crypto = require("crypto");
var mkdirp = require("mkdirp");
var fsAsync = bluebird.promisifyAll(fs);
var mkdirpAsync = bluebird.promisify(mkdirp);
var listImports;
(function (listImports) {
    var perBufferImportCache = {};
    var ImportBuffer = (function () {
        function ImportBuffer(importLister, bufferKey) {
            this.bufferKey = bufferKey;
            if (!importLister || !(importLister instanceof Function)) {
                throw new Error('Invalid importer.');
            }
            if (!bufferKey) {
                throw new Error('A buffer key is required.');
            }
            this.importLister = importLister;
            this.importCache = perBufferImportCache[bufferKey];
            if (!this.importCache) {
                this.importCache = perBufferImportCache[bufferKey] = {};
            }
        }
        ImportBuffer.prototype.modifiedTimeIsTheSame = function (info) {
            return __awaiter(this, void 0, void 0, function () {
                var stat, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4, fsAsync.statAsync(info.path)];
                        case 1:
                            stat = _a.sent();
                            return [2, (stat.mtime.getTime() === info.time)];
                        case 2:
                            error_1 = _a.sent();
                            return [2, false];
                        case 3: return [2];
                    }
                });
            });
        };
        ImportBuffer.prototype.getCacheFile = function (filePath) {
            var filePathKey = crypto.createHash('md5').update(filePath).digest('hex') + "_" + path.basename(filePath);
            var outputPath = path.join(os.tmpdir(), this.bufferKey);
            return path.join(outputPath, filePathKey);
        };
        ImportBuffer.prototype.loadPreviousResults = function (filePath) {
            return __awaiter(this, void 0, void 0, function () {
                var existingImports, cacheFile, data, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            existingImports = this.importCache[filePath];
                            if (existingImports) {
                                return [2, existingImports];
                            }
                            cacheFile = this.getCacheFile(filePath);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, fsAsync.readFileAsync(cacheFile)];
                        case 2:
                            data = _a.sent();
                            return [2, JSON.parse(data)];
                        case 3:
                            error_2 = _a.sent();
                            if (error_2.code !== 'ENOENT') {
                                console.error("Failed to load cached results from '" + cacheFile + "'. " + error_2);
                            }
                            return [2, null];
                        case 4: return [2];
                    }
                });
            });
        };
        ImportBuffer.prototype.cacheResults = function (filePath, imports) {
            return __awaiter(this, void 0, void 0, function () {
                var cacheFile, outputPath, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.importCache[filePath] = imports;
                            cacheFile = this.getCacheFile(filePath);
                            outputPath = path.dirname(cacheFile);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4, mkdirpAsync(outputPath)];
                        case 2:
                            _a.sent();
                            return [4, fsAsync.writeFileAsync(cacheFile, JSON.stringify(imports))];
                        case 3:
                            _a.sent();
                            return [3, 5];
                        case 4:
                            error_3 = _a.sent();
                            console.error("Failed to cache results to '" + cacheFile + "'. " + error_3);
                            return [3, 5];
                        case 5: return [2, imports];
                    }
                });
            });
        };
        ImportBuffer.prototype.listImports = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var useImportLister, existingImports, results;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            useImportLister = function () { return __awaiter(_this, void 0, void 0, function () {
                                var results_1, error_4;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 3, , 4]);
                                            return [4, this.importLister(file)];
                                        case 1:
                                            results_1 = _a.sent();
                                            return [4, this.cacheResults(file.path, results_1)];
                                        case 2: return [2, _a.sent()];
                                        case 3:
                                            error_4 = _a.sent();
                                            console.error("An unknown error occurred: " + error_4);
                                            return [2, []];
                                        case 4: return [2];
                                    }
                                });
                            }); };
                            return [4, this.loadPreviousResults(file.path)];
                        case 1:
                            existingImports = _a.sent();
                            if (!!existingImports) return [3, 3];
                            return [4, useImportLister()];
                        case 2: return [2, _a.sent()];
                        case 3: return [4, Promise.all(existingImports.map(this.modifiedTimeIsTheSame))];
                        case 4:
                            results = _a.sent();
                            if (results.every(function (r) { return r; })) {
                                return [2, existingImports];
                            }
                            return [4, useImportLister()];
                        case 5: return [2, _a.sent()];
                    }
                });
            });
        };
        return ImportBuffer;
    }());
    listImports.ImportBuffer = ImportBuffer;
})(listImports || (listImports = {}));
module.exports = listImports;

//# sourceMappingURL=import-buffer.js.map
