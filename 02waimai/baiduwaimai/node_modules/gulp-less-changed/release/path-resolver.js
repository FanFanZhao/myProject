"use strict";
/* istanbul ignore next */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* istanbul ignore next */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* istanbul ignore next */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var fs = require("fs");
var path = require("path");
var bluebird = require("bluebird");
var fsAsync = bluebird.promisifyAll(fs);
var pathResolver;
(function (pathResolver) {
    var PathResolverError = (function (_super) {
        __extends(PathResolverError, _super);
        function PathResolverError(message) {
            /* istanbul ignore next */
var _this = _super.call(this, message) || this;
            _this.message = message;
            _this.name = _this.constructor.name;
            Object.setPrototypeOf(_this, PathResolverError.prototype);
            Error.captureStackTrace(_this, _this.name);
            return _this;
        }
        return PathResolverError;
    }(Error));
    pathResolver.PathResolverError = PathResolverError;
    var PathResolver = (function () {
        function PathResolver() {
        }
        PathResolver.prototype.filterExistingPaths = function (pathsToTry) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var checkedPaths;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, Promise.all(pathsToTry.map(function (path) { return __awaiter(_this, void 0, void 0, function () {
                                var error_1;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 2, , 3]);
                                            return [4, fsAsync.statAsync(path)];
                                        case 1:
                                            _a.sent();
                                            return [2, path];
                                        case 2:
                                            error_1 = _a.sent();
                                            return [2, null];
                                        case 3: return [2];
                                    }
                                });
                            }); }))];
                        case 1:
                            checkedPaths = _a.sent();
                            return [2, checkedPaths.filter(function (path) { return !!path; })];
                    }
                });
            });
        };
        PathResolver.prototype.resolve = function (currentDirectory, inputPath, searchPaths) {
            return __awaiter(this, void 0, void 0, function () {
                var pathsToTry, resolvedPaths, validPath, triedPathsDisplay;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            pathsToTry = [path.join(currentDirectory, inputPath)];
                            if (searchPaths) {
                                pathsToTry.push.apply(pathsToTry, searchPaths.map(function (p) { return path.join(p, inputPath); }));
                            }
                            pathsToTry.push(path.join(process.cwd(), inputPath));
                            return [4, this.filterExistingPaths(pathsToTry)];
                        case 1:
                            resolvedPaths = _a.sent();
                            validPath = resolvedPaths[0];
                            if (!validPath) {
                                triedPathsDisplay = pathsToTry.map(function (p) { return "'" + p + "'"; }).join(', ');
                                throw new PathResolverError("Import file '" + inputPath + "' wasn't found. Tried: " + triedPathsDisplay + ".");
                            }
                            return [2, validPath];
                    }
                });
            });
        };
        return PathResolver;
    }());
    pathResolver.PathResolver = PathResolver;
})(pathResolver || (pathResolver = {}));
module.exports = pathResolver;

//# sourceMappingURL=path-resolver.js.map
